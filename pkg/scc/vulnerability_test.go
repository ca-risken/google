package scc

import (
	"testing"

	"github.com/google/go-cmp/cmp"

	triage "github.com/ca-risken/core/pkg/server/finding"
	"github.com/ca-risken/vulnerability/pkg/model"
)

func TestEvaluateVulnerability(t *testing.T) {
	tests := []struct {
		name string
		vuln *model.Vulnerability
		want *triage.RiskenTriage
	}{
		{
			name: "nil",
			vuln: nil,
			want: nil,
		},
		{
			name: "empty",
			vuln: &model.Vulnerability{},
			want: nil,
		},
		{
			name: "kev",
			vuln: &model.Vulnerability{
				CVE: &model.CVEData{
					CVEDataMeta: model.CVEDataMetaData{
						ID: "CVE-9999-12345",
					},
				},
				KEV: &model.KEV{
					CveID: model.Ptr("KEV-9999-12345"),
				},
			},
			want: &triage.RiskenTriage{
				Source: &triage.TriageSource{
					Exploitation: &triage.Exploitation{
						HasCVE:    triage.Ptr(true),
						HasKEV:    triage.Ptr(true),
						PublicPOC: triage.Ptr(false),
						EpssScore: triage.Ptr(float32(0)),
					},
					Utility: &triage.Utility{
						Automatable:  triage.Ptr(triage.AUTOMATABLE_NO),
						ValueDensity: triage.Ptr(triage.TRIAGE_UNKNOWN),
					},
				},
			},
		},
		{
			name: "poc_epss",
			vuln: &model.Vulnerability{
				CVE: &model.CVEData{
					CVEDataMeta: model.CVEDataMetaData{
						ID: "CVE-9999-12345",
					},
				},
				PoC: []*model.PoC{
					{
						CVEID: "CVE-9999-12345",
					},
				},
				EPSS: model.Ptr(0.75),
			},
			want: &triage.RiskenTriage{
				Source: &triage.TriageSource{
					Exploitation: &triage.Exploitation{
						HasCVE:    triage.Ptr(true),
						HasKEV:    triage.Ptr(false),
						PublicPOC: triage.Ptr(true),
						EpssScore: triage.Ptr(float32(0.75)),
					},
					Utility: &triage.Utility{
						Automatable:  triage.Ptr(triage.AUTOMATABLE_YES),
						ValueDensity: triage.Ptr(triage.TRIAGE_UNKNOWN),
					},
				},
			},
		},
		{
			name: "all",
			vuln: &model.Vulnerability{
				CVE: &model.CVEData{
					CVEDataMeta: model.CVEDataMetaData{
						ID: "CVE-9999-12345",
					},
				},
				KEV: &model.KEV{
					CveID: model.Ptr("KEV-9999-12345"),
				},
				PoC: []*model.PoC{
					{
						CVEID: "CVE-9999-12345",
					},
				},
				EPSS: model.Ptr(0.25),
			},
			want: &triage.RiskenTriage{
				Source: &triage.TriageSource{
					Exploitation: &triage.Exploitation{
						HasCVE:    triage.Ptr(true),
						HasKEV:    triage.Ptr(true),
						PublicPOC: triage.Ptr(true),
						EpssScore: triage.Ptr(float32(0.25)),
					},
					Utility: &triage.Utility{
						Automatable:  triage.Ptr(triage.AUTOMATABLE_YES),
						ValueDensity: triage.Ptr(triage.TRIAGE_UNKNOWN),
					},
				},
			},
		},
	}

	for _, tc := range tests {
		t.Run(tc.name, func(t *testing.T) {
			got := evaluateVulnerability(tc.vuln)
			if diff := cmp.Diff(tc.want, got); diff != "" {
				t.Errorf("mismatch (-want +got):\n%s", diff)
			}
		})
	}
}
