package scc

import (
	"context"

	triage "github.com/ca-risken/core/pkg/server/finding"
	"github.com/ca-risken/vulnerability/pkg/model"
)

func (s *SqsHandler) GetVulnerability(ctx context.Context, cveID string) (*model.Vulnerability, error) {
	if s.vulnClient == nil {
		return nil, nil
	}
	if cveID == "" {
		return nil, nil
	}
	resp, err := s.vulnClient.GetVulnerability(ctx, &model.GetVulnerabilityRequest{
		CVEID: model.Ptr(cveID),
	})
	if err != nil {
		return nil, err
	}
	return resp.Vulnerability, nil
}

func evaluateVulnerability(vuln *model.Vulnerability) *triage.RiskenTriage {
	if vuln == nil {
		return nil
	}

	hasCVE := false
	if vuln.CVE != nil && vuln.CVE.CVEDataMeta.ID != "" {
		hasCVE = true
	} else {
		return nil
	}
	hasKEV := false
	if vuln.KEV != nil {
		hasKEV = true
	}
	publicPOC := false
	automatable := triage.AUTOMATABLE_NO
	if vuln.PoC != nil {
		publicPOC = true
		automatable = triage.AUTOMATABLE_YES
	}
	epssScore := float32(0.0)
	if vuln.EPSS != nil {
		epssScore = float32(*vuln.EPSS)
	}

	riskenTriage := &triage.RiskenTriage{}
	riskenTriage.Source = &triage.TriageSource{
		Exploitation: &triage.Exploitation{
			HasCVE:    triage.Ptr(hasCVE),
			HasKEV:    triage.Ptr(hasKEV),
			PublicPOC: triage.Ptr(publicPOC),
			EpssScore: triage.Ptr(epssScore),
		},
		Utility: &triage.Utility{
			Automatable:  triage.Ptr(automatable),
			ValueDensity: triage.Ptr(triage.TRIAGE_UNKNOWN),
		},
	}
	return riskenTriage
}
